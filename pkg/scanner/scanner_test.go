package scanner

import (
	"encoding/hex"
	"fmt"
	"github.com/projectdiscovery/gologger"
	"github.com/projectdiscovery/gologger/levels"
	"github.com/tongchengbin/xmap/pkg/types"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/tongchengbin/xmap/pkg/utils"
)

func createTestScanner() *ServiceScanner {
	gologger.DefaultLogger.SetMaxLevel(levels.LevelDebug)
	opts := types.DefaultOptions()
	opts.VersionIntensity = 9
	opts.DebugResponse = true
	opts.ServiceVersion = true
	opts.Debug = true
	scan, err := NewServiceScanner(opts)
	if err != nil {
		panic(err)
	}
	fmt.Println(scan)
	return scan

}
func TestParseCertificatesFromServerHello(t *testing.T) {
	//  百度server hello
	sslHex := ""
	data, _ := hex.DecodeString(sslHex)
	cert, err := utils.ParseCertificatesFromServerHello(data)
	assert.Nil(t, err, "证书解析错误")
	fmt.Printf("%v", cert)
}

func TestDialerGetTls(t *testing.T) {
	//	todo dialer 目前使用的是hostname 作为key、应该使用host 作为key才能保证数据准确性
}
